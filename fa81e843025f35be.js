import"./style.css";import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GLTFLoader}from"three/examples/jsm/loaders/GLTFLoader.js";import{DRACOLoader}from"three/examples/jsm/loaders/DRACOLoader.js";const canvas=document.querySelector("canvas.webgl"),scene=new THREE.Scene,dracoLoader=new DRACOLoader;dracoLoader.setDecoderPath("/draco/");const gltfLoader=new GLTFLoader;gltfLoader.setDRACOLoader(dracoLoader);let mixer=null;gltfLoader.load("/models/device.gltf",(e=>{e.scene.scale.set(.04,.04,.04),e.scene.position.set(0,1.5,0),scene.add(e.scene),mixer=new THREE.AnimationMixer(e.scene),mixer.clipAction(e.animations[0]).play()}));const ambientLight=new THREE.AmbientLight(16777215,.8);scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(16777215,.6);directionalLight.castShadow=!0,directionalLight.shadow.mapSize.set(1024,1024),directionalLight.shadow.camera.far=15,directionalLight.shadow.camera.left=-7,directionalLight.shadow.camera.top=7,directionalLight.shadow.camera.right=7,directionalLight.shadow.camera.bottom=-7,directionalLight.position.set(-5,5,0),scene.add(directionalLight);const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,100);camera.position.set(2,2,2),scene.add(camera);const controls=new OrbitControls(camera,canvas);controls.target.set(0,.75,0),controls.enableDamping=!0,controls.enableZoom=!1;const renderer=new THREE.WebGLRenderer({canvas,alpha:!0});renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,renderer.toneMapping=THREE.ReinhardToneMapping,renderer.toneMappingExposure=2.3,renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2));const clock=new THREE.Clock;let previousTime=0;const tick=()=>{const e=clock.getElapsedTime(),i=e-previousTime;previousTime=e,mixer&&mixer.update(i),controls.update(),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();